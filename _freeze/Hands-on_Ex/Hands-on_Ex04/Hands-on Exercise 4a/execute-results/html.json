{
  "hash": "50d512b59ab2376c018987fe37002ed3",
  "result": {
    "engine": "knitr",
    "markdown": "\n---\ntitle: \"Hands-on Exercise 4a\"\nauthor: \"Enrico Sebastian\"\ndate: \"May 5, 2025\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n# Visualising Distribution\n\n## **1  Learning Outcome**\n\nVisualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions.\n\n## **2  Getting Started**\n\n### **2.1 Installing and loading the packages**\nFor the purpose of this exercise, the following R packages will be used, they are:\n\n-  ggridges: A ggplot2 extension specially designed for plotting ridgeline plots,\n\n-  ggdist: A ggplot2 extension spacially desgin for visualising distribution and uncertainty,\n\n-  tidyverse: A family of R packages to meet the modern data science and visual communication needs,\n\n-  ggthemes: A ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package\n\n-  colorspace: An R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\nThe code chunk below will be used load these R packages into RStudio environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n```\n:::\n\n\n### **2.2 Data import**\n\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam <- read_csv(\"data/Exam_data.csv\")\n```\n:::\n\n\n## **3  Visualising Distribution with Ridgeline Plot**\n\nRidgeline plot _(sometimes called Joyplot)_ is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\n\nThe figure below is a ridgelines plot showing the distribution of English score by class.\n\n![](images/image8.png)\n\n:::call-out note\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\n:::\n\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n\n## **3.1 Plotting ridgeline graph: ggridges method**\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\n\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\n\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\n:::panel-tabset\n\n## The plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on-Exercise-4a_files/figure-html/unnamed-chunk-3-1.png){width=1920}\n:::\n:::\n\n\n## The code chunk\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on-Exercise-4a_files/figure-html/unnamed-chunk-4-1.png){width=1920}\n:::\n:::\n\n:::\n\n### **3.2 Varying fill colors along the x axis**\n\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\n:::panel-tabset\n\n## The plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on-Exercise-4a_files/figure-html/unnamed-chunk-5-1.png){width=1920}\n:::\n:::\n\n\n## The code chunk\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on-Exercise-4a_files/figure-html/unnamed-chunk-6-1.png){width=1920}\n:::\n:::\n\n:::\n\n\n### **3.3 Mapping the probabilities directly onto colour**\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\n\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\n:::panel-tabset\n\n## The plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on-Exercise-4a_files/figure-html/unnamed-chunk-7-1.png){width=1920}\n:::\n:::\n\n\n## The code chunk\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on-Exercise-4a_files/figure-html/unnamed-chunk-8-1.png){width=1920}\n:::\n:::\n\n:::\n\n\n::: call-out Important\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges().\n:::\n\n### **3.4 Ridgeline plots with quantile lines**\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\n:::panel-tabset\n\n## The plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on-Exercise-4a_files/figure-html/unnamed-chunk-9-1.png){width=1920}\n:::\n:::\n\n\n## The code chunk\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on-Exercise-4a_files/figure-html/unnamed-chunk-10-1.png){width=1920}\n:::\n:::\n\n:::\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\n:::panel-tabset\n\n## The plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on-Exercise-4a_files/figure-html/unnamed-chunk-11-1.png){width=1920}\n:::\n:::\n\n\n## The code chunk\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on-Exercise-4a_files/figure-html/unnamed-chunk-12-1.png){width=1920}\n:::\n:::\n\n:::\n\n\n## **4  Visualising Distribution with Raincloud Plot**\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\n\nIn this section, you will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\n### **4.1 Plotting a Half Eye graph**\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\n\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\n:::panel-tabset\n\n## The plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on-Exercise-4a_files/figure-html/unnamed-chunk-13-1.png){width=1920}\n:::\n:::\n\n\n## The code chunk\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on-Exercise-4a_files/figure-html/unnamed-chunk-14-1.png){width=1920}\n:::\n:::\n\n:::\n\n:::call-out note\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n:::\n\n### **4.2 Adding the boxplot with geom_boxplot()**\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\n:::panel-tabset\n\n## The plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on-Exercise-4a_files/figure-html/unnamed-chunk-15-1.png){width=1920}\n:::\n:::\n\n\n## The code chunk\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on-Exercise-4a_files/figure-html/unnamed-chunk-16-1.png){width=1920}\n:::\n:::\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n```\n\n::: {.cell-output-display}\n![](Hands-on-Exercise-4a_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n### **4.3 Adding the Dot Plots with stat_dots()**\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\n:::panel-tabset\n\n## The plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on-Exercise-4a_files/figure-html/unnamed-chunk-18-1.png){width=1920}\n:::\n:::\n\n\n## The code chunk\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on-Exercise-4a_files/figure-html/unnamed-chunk-19-1.png){width=1920}\n:::\n:::\n\n:::\n\n### **4.4 Finishing touch**\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\n:::panel-tabset\n\n## The plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on-Exercise-4a_files/figure-html/unnamed-chunk-20-1.png){width=1920}\n:::\n:::\n\n\n## The code chunk\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on-Exercise-4a_files/figure-html/unnamed-chunk-21-1.png){width=1920}\n:::\n:::\n\n:::\n\n\n## **References**\n\n-  Introducing Ridgeline Plots (formerly Joyplots)\nClaus O. Wilke Fundamentals of Data Visualization especially Chapter 6, 7, 8, 9 and 10.\n\n-  Allen M, Poggiali D, Whitaker K et al. “Raincloud plots: a multi-platform tool for robust data. visualization” [version 2; peer review: 2 approved]. Welcome Open Res 2021, pp. 4:63.\nDots + interval stats and geoms",
    "supporting": [
      "Hands-on-Exercise-4a_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}